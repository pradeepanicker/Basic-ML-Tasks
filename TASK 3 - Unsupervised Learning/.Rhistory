x=1
y>2
y=>2
y => 2
y > 2
y>2
y=2
###functions
print("hello world")
###computation
17+5
x+6
y=25+5
sqrt(16)
y=sqrt(16)
x
x-5
x+y
x*y
x/y
##assignment
call(x)
#call variable
##assignment
#call variable
call(x)
##assignment
#call variable
x =2
y=5
x
z='hello'
a='world'
z+a
z
a+z
#computation
a+z
x+y
#adding object together
a+z
b=x+y
#assignment
x
#assignment
x=1
y=100
z=hello
z='hello'
a='supper'
b='hello'
x
x+1
x+1
x+y
x
a
a='hello'
b='superb'
c='world'
x+y
z=x+y
#assignments
x=1
y=10
z=25000
a='hai'
b='pradeep'
x+y
x+y+z
print ('hai pradeep')
print (a;b)
print (a b)
print (a,b)
a
b
c=a+b
v=x+y+z
v=x+y+z
class (a)
f=(true)
#boolean
f = (true)
f=(TRUE)
G=(FALSE)
H=(CORRECT)
H=(RIGHT)
F
G
F
f
g
G
setwd("C:\Users\prade\OneDrive\Desktop\BABI")
RVECTOR
MY_VECTOR=C(2,55,66,100,200)
MY_VECTOR=c(2,55,66,100,200)
my_vector2=c(hellow,pradeep, good morning)
my_vector2=c('hello,pradeep, good morning')
my_vector3=c(hello,3,4,great)
my_vector3=c('hello',3,4,'great')
my_vector2
my_vector2[2]
my_vector2['2']
my_vector2[1]
MY_VECTOR[3]
my_matrix[my_vector2,nrow=2,ncol=2]
my_matrix=[my_vector2,nrow=2,ncol=2]
my_matrix=matrix(my_vector2,nrow=2,ncol=2)
my_matrix
my_matrix1=matrix(MY_VECTOR,nrow=3,ncol=2)
my_matrix1
20:30
my_matrix2=matrix(20:30, nrow=3,ncol=4)
my_matrix2
my_matrix3=matrix(22:27,nrow=2,ncol=3)
my_matrix3
my_matrix4=matrix(22:28,nrow=2,ncol=3)
my_matrix4
my_matrix3[2,3]
my_matrix1[2,1]
my_matrix2[-3,-3:-4]
my_matrix2[1:3,1:2]
my_vector4=vector(1,6,8)
my_vector4=c(1,6,8)
my_dataframe=dataframe(my_vector4,my_vector2)
my_dataframe=data.frame(my_vector4,my_vector2)
my_dataframe
my_vector5=c(20,30,40,50)
my_dataframe=data.frame(my_vector5,my_vector3)
my_dataframe
my_dataframe[1:2,2]
my_dataframe[1:2,1:2]
my_dataframe[1:2,]
my_dataframe[1:2,1]
my_dataframe[1:2,2]
###lists
my_list=list(my_vector5,my_vector3,my_matrix3,my_dataframe)
my_list
install.packages("readr")
library(readr)
install.packages(c("boot", "foreign", "KernSmooth", "mgcv", "nlme"))
#library(outliers)
library(caret)
library(caTools)
#library(rpart)
#library(gmodels)
#library(InformationValue)
#library(ROCR)
#library(pscl)
library(plyr)
#library(faraway)
library(dplyr)
#library(DMwR)
library(ggplot2)
library(tibble)
library(tidyverse)
library(lubridate)
#library(chron)
library(arules)
library(RColorBrewer)
library(arulesViz)
install.packages("C:/Users/PRADEEP PANICKER/Downloads/rlang_0.4.5.tar.gz", repos = NULL, type = "source")
remove.packages("rlang", lib="~/R/win-library/3.6")
install.packages("C:/Users/PRADEEP PANICKER/Downloads/rlang_0.4.5.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/PRADEEP PANICKER/Downloads/rlang_0.4.5.tar.gz", repos = NULL, type = "source")
install.packages("rlang", dependencies = TRUE)
#library(outliers)
library(caret)
library(caTools)
#library(rpart)
#library(gmodels)
#library(InformationValue)
#library(ROCR)
#library(pscl)
library(plyr)
#library(faraway)
library(dplyr)
#library(DMwR)
library(ggplot2)
library(tibble)
library(tidyverse)
library(lubridate)
#library(chron)
library(arules)
library(RColorBrewer)
library(arulesViz)
remove.packages("tidyselect", lib="~/R/win-library/3.6")
install.packages("tidyselect", dependencies = TRUE)
install.packages("tidyselect", dependencies = TRUE)
#library(outliers)
library(caret)
library(caTools)
#library(rpart)
#library(gmodels)
#library(InformationValue)
#library(ROCR)
#library(pscl)
library(plyr)
#library(faraway)
library(dplyr)
#library(DMwR)
library(ggplot2)
library(tibble)
library(tidyverse)
detach("package:tibble", unload = TRUE)
remove.packages("tibble", lib="~/R/win-library/3.6")
install.packages("tibble", dependencies = TRUE)
install.packages("tibble", dependencies = TRUE)
#library(outliers)
library(caret)
library(caTools)
#library(rpart)
#library(gmodels)
#library(InformationValue)
#library(ROCR)
#library(pscl)
library(plyr)
#library(faraway)
library(dplyr)
#library(DMwR)
library(ggplot2)
library(tibble)
library(tidyverse)
library(lubridate)
#library(chron)
library(arules)
library(RColorBrewer)
library(arulesViz)
library(readr)
w_data <- read_csv("http://bit.ly/w data")
data <- read_csv("http://bit.ly/w data")
data <- read_csv('https://drive.google.com/file/d/11Iq7YvbWZbt8VXjfm06brx6
6b10YiwK --/view?usp=sharing')
data = as.data.frame(data)
View(data)
library(readr)
Iris <- read_csv("C:/Users/PRADEEP PANICKER/OneDrive/Desktop/BABI/INTERNSHIPS/SPARK Foundation/TASK 3/Iris.csv")
View(Iris)
setwd('C:/Users/PRADEEP PANICKER/OneDrive/Desktop/BABI/INTERNSHIPS/SPARK Foundation/TASK 3')
View(Iris)
dim(iris)
str(iris)
summary(iris)
library(caret)
library(caTools)
library(rpart)
library(gmodels)
library(plyr)
library(dplyr)
library(DMwR)
library(ggplot2)
library(arules)
library(RColorBrewer)
library(arulesViz)
library(arulesViz)
library(RColorBrewer)
?scale
# Verify if all Data Fields are Imported
dim(iris)
iris$
iris1= scale(iris[,c(2:5)])
iris$
iris1= scale(iris, iris[,c(2:5)])
# Verify if all Data Fields are Imported
dim(iris)
iris$
iris1= scale(iris, iris[,c(2:4)])
iris$
iris1= scale(iris, iris[,c(2,3,4,5)])
iris$
iris1= scale(iris)
iris$
iris1= iris[,-c(5)]
iris$
iris1= iris[,-c(5)]
iris1
iris$
iris1= iris[,c(-5)]
iris1
iris$
iris1= Iris[,c(-5)]
# Verify if all Data Fields are Imported
dim(Iris)
# Verify if the class of each coloumn is as desired for statistical evaluation.
str(Iris)
# Verify the MIN-MAX Values & Check if any NAs present in dataset.
summary(Iris)
Iris= make.names(name.vector,unique = TRUE)
Iris= make.names(name.Iris,unique = TRUE)
Iris= make.names(names,unique = TRUE)
# Verify the MIN-MAX Values & Check if any NAs present in dataset.
summary(Iris)
# Verify if the class of each coloumn is as desired for statistical evaluation.
str(Iris)
Iris1= make.names(Iris,unique = TRUE)
str(Iris1)
# Verify the MIN-MAX Values & Check if any NAs present in dataset.
summary(Iris)
Iris$SepalLengthCm= rename(SepalLengthCm= Sepal.Length)
Iris %>%
rename(
SepalLengthCm = Sepal.Length,
SepalWidthCm = Sepal.Width
PetalLengthCm= Petal.Length
Iris %>%
rename(
SepalLengthCm = Sepal.Length,
SepalWidthCm = Sepal.Width,
PetalLengthCm= Petal.Length,
PetalWidthCm= Petal.Width
)
Iris %>%
rename(
SepalLengthCm = SepalLength,
SepalWidthCm = SepalWidth,
PetalLengthCm= PetalLength,
PetalWidthCm= PetalWidth
)
Iris %>%
rename(
SepalLength = SepalLengthCm,
SepalWidth = SepalWidthCm,
PetalLength= PetalLengthCm,
PetalWidth= PetalWidthCm
)
str(Iris)
Iris1 = Iris
scale(Iris1)
str(Iris1)
Iris1= Iris1[,c(-1,-6)]
str(Iris1)
cbind(Iris1,Iris{,c(1,6)})
cbind(Iris1,Iris[],c(1,6)])
cbind(Iris1,Iris[,c(1,6)])
Iris2= cbind(Iris1,Iris[,c(1,6)])
View(Iris2)
View(Iris1)
scale(Iris1)
Iris2 = scale(Iris1)
Iris2 =as.data.frame(scale(Iris1))
View(Iris2)
Iris3= cbind(Iris2, Iris[,c(1,6)])
View(Iris3)
View(Iris)
Iris3$SpeciesSet= ifelse(Iris3$Species='Iris-setosa',0,1)
Iris3$SpeciesSet= ifelse(Iris3$Species='Iris-setosa','0','1')
Iris3$SpeciesSet= ifelse(Iris3$Species=Iris-setosa,'0','1')
str(Iris3)
Iris3$Species= as.factor(Iris3$Species)
summary(Iris3$Species)
Iris3 %>%
mutate(SpeciesSet = case_when(Iris3$Species >= 'Iris-setosa' ~ '0',
Iris3$Species >= 'Iris-versicolor'~ '1',
TRUE ~ '1'))
View(Iris3)
Iris3= cbind(Iris2, Iris[,c(1,6)])
summary(Iris3$Species)
Iris3$Species= as.factor(Iris3$Species)
summary(Iris3$Species)
Iris3$SpeciesSet= ifelse(Iris3$Species='Iris-setosa','0','1')
Iris3$SpeciesSet= ifelse(Iris3$Species=Iris-setosa,'0','1')
View(Iris3)
for (i in 1:nrow(Iris3)){
if(Iris3$Species[i]='Iris-setosa'){
for (i in 1:nrow(Iris3)){
if(Iris3$Species[i]='setosa'){
write.csv(Iris3, file ='C:/Users/PRADEEP PANICKER/OneDrive/Desktop/BABI/INTERNSHIPS/SPARK Foundation/TASK 3/Iris3.csv')
read.csv(Iris4,file ='C:/Users/PRADEEP PANICKER/OneDrive/Desktop/BABI/INTERNSHIPS/SPARK Foundation/TASK 3/Iris4.csv', header = TRUE)
read.csv(file ='C:/Users/PRADEEP PANICKER/OneDrive/Desktop/BABI/INTERNSHIPS/SPARK Foundation/TASK 3/Iris4.csv', header = TRUE)
Iris4= read.csv(file ='C:/Users/PRADEEP PANICKER/OneDrive/Desktop/BABI/INTERNSHIPS/SPARK Foundation/TASK 3/Iris4.csv', header = TRUE)
View(Iris4)
Iris4= Iris4[, c(-1,-7)]
str(Iris4)
colSums(is.na(Iris4))
rowsum(is.na(Iris4))
rowSums(is.na(Iris4))
d.euclidean= dist(x= Iris4[,1:4], method = 'euclidean')
print(d.euclidean, digits=3)
irishclust= hclust(d.euclidean, method = 'average')
plot(irishclust, labels = as.character(Iris4[,6]))
plot(irishclust, labels = as.character(Iris4[,6]))
rect.hclust(irishclust, k=3, border = 'red')
View(iris)
View(iris)
View(Iris1)
View(Iris2)
View(Iris3)
Iris4= cbind(Iris4, Iris[,c(6)])
View(Iris4)
groups= cutree(irishclust, k=3)
Iris5= cbind(Iris4,groups)
View(Iris5)
aggrIris5= aggregate(Iris5[,c(1:4)],list(Iris5$groups),mean)
head(aggrIris5)
View(Iris3)
View(iris)
View(Iris)
Iris5= cbind(Iris,groups)
View(Iris5)
aggrIris= aggregate(Iris5[,c(2:5)],list(Iris5$groups),mean)
head(aggrIris5)
head(aggrIris)
clus.profiling= data.frame(Group= aggrIris[,1],Freq= as.vector(table(Iris5$groups)),aggrIris[-1])
View(clus.profiling)
Iris5$groups= as.factor(Iris5$groups)
# Visualisation
attach(Iris5)
ggplot(data = Iris5, aes( x= groups, y= SepelLengthCm, fill= groups))+ geom_boxplot()
ggplot(data = Iris5, aes( x= Iris5$groups, y= Iris5$SepalLengthCm, fill= groups))+ geom_boxplot()
ggplot(data = Iris5, aes( x= groups, y= SepalLengthCm, fill= groups))+ geom_boxplot()
ggplot(data = Iris5, aes( x= groups, y= SepalWidthCm, fill= groups))+ geom_boxplot()
ggplot(data = Iris5, aes( x= groups, y= PetalLengthCm, fill= groups))+ geom_boxplot()
ggplot(data = Iris5, aes( x= groups, y= PetalWidthCm, fill= groups))+ geom_boxplot()
ggplot(data = Iris5, aes( x= groups, y= SepalLengthCm, fill= groups))+ geom_boxplot()
ggplot(data = Iris5, aes( x= groups, y= SepalWidthCm, fill= groups))+ geom_boxplot()
ggplot(data = Iris5, aes( x= groups, y= PetalLengthCm, fill= groups))+ geom_boxplot()
ggplot(data = Iris5, aes( x= groups, y= PetalWidthCm, fill= groups))+ geom_boxplot()
par(mflow(c(2,2)))
par(mfrow=c(2,2))
ggplot(data = Iris5, aes( x= groups, y= SepalLengthCm, fill= groups))+ geom_boxplot()
ggplot(data = Iris5, aes( x= groups, y= SepalWidthCm, fill= groups))+ geom_boxplot()
ggplot(data = Iris5, aes( x= groups, y= PetalLengthCm, fill= groups))+ geom_boxplot()
ggplot(data = Iris5, aes( x= groups, y= PetalWidthCm, fill= groups))+ geom_boxplot()
par(mfrow=c(2,4))
ggplot(data = Iris5, aes( x= groups, y= SepalLengthCm, fill= groups))+ geom_boxplot()
ggplot(data = Iris5, aes( x= groups, y= SepalWidthCm, fill= groups))+ geom_boxplot()
ggplot(data = Iris5, aes( x= groups, y= PetalLengthCm, fill= groups))+ geom_boxplot()
ggplot(data = Iris5, aes( x= groups, y= PetalWidthCm, fill= groups))+ geom_boxplot()
par(mfrow=c(4,4))
ggplot(data = Iris5, aes( x= groups, y= SepalLengthCm, fill= groups))+ geom_boxplot()
ggplot(data = Iris5, aes( x= groups, y= SepalWidthCm, fill= groups))+ geom_boxplot()
ggplot(data = Iris5, aes( x= groups, y= PetalLengthCm, fill= groups))+ geom_boxplot()
ggplot(data = Iris5, aes( x= groups, y= PetalWidthCm, fill= groups))+ geom_boxplot()
library(caret)
library(caTools)
library(rpart)
library(gmodels)
library(plyr)
library(dplyr)
library(DMwR)
library(ggplot2)
library(arules)
library(RColorBrewer)
library(arulesViz)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
# Data is imported using the 'Import Dataset' tab
# the working directory is created
setwd('C:/Users/PRADEEP PANICKER/OneDrive/Desktop/BABI/INTERNSHIPS/SPARK Foundation/TASK 3')
# Verify if all Data Fields are Imported
dim(Iris)
# Verify if the class of each coloumn is as desired for statistical evaluation.
str(Iris)
# Verify the MIN-MAX Values & Check if any NAs present in dataset.
summary(Iris)
# scaling data set to attain uniformity in variable data definition. This is since
# clustering is done with calculating the distance of different data points to each other.
# If the data value is not scaled to UNIFORMITY [ for eg. - One column has data in the rage of 1 ~ 10 and the next
# column has data in the range of 0 ~ 1] the distance calculated between the points of such two coloumns/ variables will # be FALSE-LEADING for statistical measures.
Iris1 = Iris
Iris1= Iris1[,c(-1,-6)]
str(Iris3)
Iris3$Species= as.factor(Iris3$Species)
summary(Iris3$Species)
Iris2 =as.data.frame(scale(Iris1))
Iris3= cbind(Iris2, Iris[,c(1,6)])
write.csv(Iris3, file ='C:/Users/PRADEEP PANICKER/OneDrive/Desktop/BABI/INTERNSHIPS/SPARK Foundation/TASK 3/Iris3.csv')
Iris4= read.csv(file ='C:/Users/PRADEEP PANICKER/OneDrive/Desktop/BABI/INTERNSHIPS/SPARK Foundation/TASK 3/Iris4.csv', header = TRUE)
Iris4= Iris4[, c(-1,-7)]
str(Iris4)
colSums(is.na(Iris4))
rowSums(is.na(Iris4))
d.euclidean= dist(x= Iris4[,1:4], method = 'euclidean')
print(d.euclidean, digits=3)
irishclust= hclust(d.euclidean, method = 'average')
plot(irishclust, labels = as.character(Iris4[,6]))
plot(irishclust, labels = as.character(Iris4[,6]))
rect.hclust(irishclust, k=3, border = 'red')
Iris4= cbind(Iris4, Iris[,c(6)])
groups= cutree(irishclust, k=3)
Iris5= cbind(Iris,groups)
aggrIris= aggregate(Iris5[,c(2:5)],list(Iris5$groups),mean)
head(aggrIris)
clus.profiling= data.frame(Group= aggrIris[,1],Freq= as.vector(table(Iris5$groups)),aggrIris[-1])
# Visualisation
attach(Iris5)
Iris5$groups= as.factor(Iris5$groups)
ggplot(data = Iris5, aes( x= groups, y= SepalLengthCm, fill= groups))+ geom_boxplot()
ggplot(data = Iris5, aes( x= groups, y= SepalWidthCm, fill= groups))+ geom_boxplot()
ggplot(data = Iris5, aes( x= groups, y= PetalLengthCm, fill= groups))+ geom_boxplot()
ggplot(data = Iris5, aes( x= groups, y= PetalWidthCm, fill= groups))+ geom_boxplot()
ggplot(data = Iris5, aes( x= groups, y= SepalLengthCm, fill= groups))+ geom_boxplot()
View(Iris4)
rect.hclust(irishclust, k=3, border = 'red')
plot(irishclust, labels = as.character(Iris4[,6]))
rect.hclust(irishclust, k=3, border = 'red')
irishclust= hclust(d.euclidean, method = 'average')
plot(irishclust, labels = as.character(Iris4[,6]))
plot(irishclust, labels = as.character(Iris4[,6]))
rect.hclust(irishclust, k=3, border = 'red')
print(d.euclidean, digits=3)
d.euclidean= dist(x= Iris4[,1:4], method = 'euclidean')
print(d.euclidean, digits=3)
clus.profiling= data.frame(Group= aggrIris[,1],Freq= as.vector(table(Iris5$groups)),aggrIris[-1])
View(clus.profiling)
ggplot(data = Iris5, aes( x= groups, y= PetalWidthCm, fill= groups))+ geom_boxplot()
Iris5$groups= as.factor(Iris5$groups)
ggplot(data = Iris5, aes( x= groups, y= SepalLengthCm, fill= groups))+ geom_boxplot()
ggplot(data = Iris5, aes( x= groups, y= SepalWidthCm, fill= groups))+ geom_boxplot()
ggplot(data = Iris5, aes( x= groups, y= PetalLengthCm, fill= groups))+ geom_boxplot()
ggplot(data = Iris5, aes( x= groups, y= PetalWidthCm, fill= groups))+ geom_boxplot()
